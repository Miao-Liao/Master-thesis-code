# 检查是否有NA值
if(any(is.na(data_long$value))) {
warning(paste("NA values found in file:", file, "in years:", paste(data_long$year[is.na(data_long$value)], collapse = ", ")))
}
# 添加文件名列
data_long$file_name <- file
# 添加英文名列
data_long$english_name <- english_names[file_names == file]
# 返回处理后的数据
return(data_long)
})
<
data_list <- lapply(file_names, function(file) {
# 读取数据，忽略空列
data <- read_excel(file, guess_max = 10000)
# 去除所有列名为空的列
data <- data %>% select_if(~ !all(is.na(.)))
# 检查列名
print(paste("Processing file:", file))
print(colnames(data))
# 确定需要转换的列
col_names <- colnames(data)[-1]  # 除去第一列
# 将数据转换为长格式
data_long <- pivot_longer(data, cols = all_of(col_names), names_to = "year", values_to = "value")
# 提取年份
data_long$year <- gsub("年", "", data_long$year)
# 转换值为数值类型
data_long$value <- as.numeric(data_long$value)
# 检查是否有NA值
if(any(is.na(data_long$value))) {
warning(paste("NA values found in file:", file, "in years:", paste(data_long$year[is.na(data_long$value)], collapse = ", ")))
}
# 添加文件名列
data_long$file_name <- file
# 添加英文名列
data_long$english_name <- english_names[file_names == file]
# 返回处理后的数据
return(data_long)
})
file_names <- c("城乡居民社会养老保险参保人数占比.xls", "城镇登记失业率.xls", "地方财政支出.xls",
"地区生产总值.xlsx", "国家财政性教育经费.xls", "教育就业人数占比.xls",
"居民消费价格指数.xls", "每10万人口高等教育在校人数.xls",
"每万人拥有卫生技术人员.xls", "年末参加生育保险人数.xls",
"人均可支配收入.xls", "人均住宅销售额.xls", "生育率.xlsx")
english_names <- c("social_insurance_participation", "urban_unemployment_rate",
"local_fiscal_expenditure", "GDP", "national_education_funding",
"education_employment_rate", "CPI", "HE_students_per_100000",
"health_technicians_per_10000", "maternity_insurance_participation",
"per_capita_disposable_income", "per_capita_residential_sales",
"fertility_rate")
data_list <- lapply(file_names, function(file) {
# 读取数据，忽略空列
data <- read_excel(file, guess_max = 10000)
# 去除所有列名为空的列
data <- data %>% select_if(~ !all(is.na(.)))
# 检查列名
print(paste("Processing file:", file))
print(colnames(data))
# 确定需要转换的列
col_names <- colnames(data)[-1]  # 除去第一列
# 将数据转换为长格式
data_long <- pivot_longer(data, cols = all_of(col_names), names_to = "year", values_to = "value")
# 提取年份
data_long$year <- gsub("年", "", data_long$year)
# 转换值为数值类型
data_long$value <- as.numeric(data_long$value)
# 检查是否有NA值
if(any(is.na(data_long$value))) {
warning(paste("NA values found in file:", file, "in years:", paste(data_long$year[is.na(data_long$value)], collapse = ", ")))
}
# 添加文件名列
data_long$file_name <- file
# 添加英文名列
data_long$english_name <- english_names[file_names == file]
# 返回处理后的数据
return(data_long)
})
# 查看所有警告信息
warnings()
file_names <- c("城乡居民社会养老保险参保人数占比.xls", "城镇登记失业率.xls", "地方财政支出.xls",
"地区生产总值.xlsx", "国家财政性教育经费.xls", "教育就业人数占比.xls",
"居民消费价格指数.xls", "每10万人口高等教育在校人数.xls",
"每万人拥有卫生技术人员.xls", "年末参加生育保险人数.xls",
"人均可支配收入.xls", "人均住宅销售额.xls", "生育率.xlsx")
english_names <- c("social_insurance_participation", "urban_unemployment_rate",
"local_fiscal_expenditure", "GDP", "national_education_funding",
"education_employment_rate", "CPI", "HE_students_per_100000",
"health_technicians_per_10000", "maternity_insurance_participation",
"per_capita_disposable_income", "per_capita_residential_sales",
"fertility_rate")
# 读取并处理每个文件的数据
data_list <- lapply(file_names, function(file) {
# 读取数据，忽略空列
data <- read_excel(file, guess_max = 10000)
# 打印当前文件名和列名
cat("Processing file:", file, "\n")
cat("Column names before cleaning:", colnames(data), "\n")
# 去除所有列名为空或全为NA的列
data <- data %>% select_if(~ !all(is.na(.)) & nchar(colnames(.)) > 0)
# 再次打印清理后的列名
cat("Column names after cleaning:", colnames(data), "\n")
# 确定需要转换的列
col_names <- colnames(data)[-1]  # 除去第一列
# 将数据转换为长格式
data_long <- pivot_longer(data, cols = all_of(col_names), names_to = "year", values_to = "value")
# 提取年份
data_long$year <- gsub("年", "", data_long$year)
# 转换值为数值类型
data_long$value <- as.numeric(data_long$value)
# 检查是否有NA值
if(any(is.na(data_long$value))) {
warning(paste("NA values found in file:", file, "in years:", paste(data_long$year[is.na(data_long$value)], collapse = ", ")))
}
# 添加文件名列
data_long$file_name <- file
# 添加英文名列
data_long$english_name <- english_names[file_names == file]
# 返回处理后的数据
return(data_long)
})
# 返回处理后的数据
return(data_long)
# 读取并处理每个文件的数据
data_list <- lapply(file_names, function(file) {
# 读取数据，忽略空列
data <- read_excel(file, guess_max = 10000)
# 打印当前文件名和列名
cat("Processing file:", file, "\n")
cat("Column names before cleaning:", colnames(data), "\n")
# 去除所有列名为空或全为NA的列
data <- data %>% select_if(~ !all(is.na(.)) & nchar(colnames(.)) > 0)
# 再次打印清理后的列名
cat("Column names after cleaning:", colnames(data), "\n")
# 确定需要转换的列
col_names <- colnames(data)[-1]  # 除去第一列
# 将数据转换为长格式
data_long <- pivot_longer(data, cols = all_of(col_names), names_to = "year", values_to = "value")
# 提取年份
data_long$year <- gsub("年", "", data_long$year)
# 转换值为数值类型
data_long$value <- as.numeric(data_long$value)
# 检查是否有NA值
if(any(is.na(data_long$value))) {
warning(paste("NA values found in file:", file, "in years:", paste(data_long$year[is.na(data_long$value)], collapse = ", ")))
}
# 添加文件名列
data_long$file_name <- file
# 添加英文名列
data_long$english_name <- english_names[file_names == file]
# 返回处理后的数据
return(data_long)
})
# 读取并处理每个文件的数据
data_list <- lapply(file_names, function(file) {
# 读取数据
data <- read_excel(file, guess_max = 10000)
# 打印当前文件名和列名
cat("Processing file:", file, "\n")
cat("Column names before cleaning:", colnames(data), "\n")
# 清理列名
colnames(data) <- make.names(colnames(data), unique = TRUE)
# 再次打印清理后的列名
cat("Column names after cleaning:", colnames(data), "\n")
# 确定需要转换的列
col_names <- colnames(data)[-1]  # 除去第一列
# 将数据转换为长格式
data_long <- pivot_longer(data, cols = all_of(col_names), names_to = "year", values_to = "value")
# 提取年份
data_long$year <- gsub("年", "", data_long$year)
# 转换值为数值类型
data_long$value <- as.numeric(data_long$value)
# 检查是否有NA值
if(any(is.na(data_long$value))) {
warning(paste("NA values found in file:", file, "in years:", paste(data_long$year[is.na(data_long$value)], collapse = ", ")))
}
# 添加文件名列
data_long$file_name <- file
# 添加英文名列
data_long$english_name <- english_names[file_names == file]
# 返回处理后的数据
return(data_long)
})
# 查看所有警告信息
warnings()
file_names <- c("城乡居民社会养老保险参保人数占比.xls", "城镇登记失业率.xls", "地方财政支出.xls",
"地区生产总值.xlsx", "国家财政性教育经费.xls", "教育就业人数占比.xls",
"居民消费价格指数.xls", "每10万人口高等教育在校人数.xls",
"每万人拥有卫生技术人员.xls", "年末参加生育保险人数.xls",
"人均可支配收入.xls", "人均住宅销售额.xls", "生育率.xlsx")
english_names <- c("social_insurance_participation", "urban_unemployment_rate",
"local_fiscal_expenditure", "GDP", "national_education_funding",
"education_employment_rate", "CPI", "HE_students_per_100000",
"health_technicians_per_10000", "maternity_insurance_participation",
"per_capita_disposable_income", "per_capita_residential_sales",
"fertility_rate")
# 读取并处理每个文件的数据
data_list <- lapply(file_names, function(file) {
# 检查文件扩展名，选择适当的读取方法
if (grepl("\\.xlsx$", file)) {
data <- read_excel(file)
} else {
data <- read_excel(file, sheet = 1)
}
# 打印当前文件名和列名
cat("Processing file:", file, "\n")
cat("Column names before cleaning:", colnames(data), "\n")
# 清理列名
colnames(data) <- make.names(colnames(data), unique = TRUE)
# 去除所有列名为空或全为NA的列
data <- data %>% select_if(~ !all(is.na(.)) & nchar(colnames(.)) > 0)
# 再次打印清理后的列名
cat("Column names after cleaning:", colnames(data), "\n")
# 确定需要转换的列
col_names <- colnames(data)[-1]  # 除去第一列
# 检查列名是否合理，如果只有一个数据列，跳过此文件
if (length(col_names) < 2) {
warning(paste("File", file, "has insufficient data columns after cleaning. Skipping this file."))
return(NULL)
}
# 将数据转换为长格式
data_long <- pivot_longer(data, cols = all_of(col_names), names_to = "year", values_to = "value")
# 提取年份
data_long$year <- gsub("年", "", data_long$year)
# 转换值为数值类型
data_long$value <- as.numeric(data_long$value)
# 检查是否有NA值
if(any(is.na(data_long$value))) {
warning(paste("NA values found in file:", file, "in years:", paste(data_long$year[is.na(data_long$value)], collapse = ", ")))
}
# 添加文件名列
data_long$file_name <- file
# 添加英文名列
data_long$english_name <- english_names[file_names == file]
# 返回处理后的数据
return(data_long)
})
# 读取并处理每个文件的数据
data_list <- lapply(file_names, function(file) {
# 检查文件扩展名，选择适当的读取方法
if (grepl("\\.xlsx$", file)) {
data <- read_excel(file)
} else {
data <- read_excel(file, sheet = 1)
}
# 打印当前文件名和列名
cat("Processing file:", file, "\n")
cat("Column names before cleaning:", colnames(data), "\n")
# 清理列名
colnames(data) <- make.names(colnames(data), unique = TRUE)
# 去除所有列名为空或全为NA的列
data <- data %>% select_if(~ !all(is.na(.)) & nchar(colnames(.)) > 0)
# 再次打印清理后的列名
cat("Column names after cleaning:", colnames(data), "\n")
# 确定需要转换的列
col_names <- colnames(data)[-1]  # 除去第一列
# 检查列名是否合理，如果只有一个数据列，跳过此文件
if (length(col_names) < 2) {
warning(paste("File", file, "has insufficient data columns after cleaning. Skipping this file."))
return(NULL)
}
# 将数据转换为长格式
data_long <- pivot_longer(data, cols = all_of(col_names), names_to = "year", values_to = "value")
# 提取年份
data_long$year <- gsub("年", "", data_long$year)
# 转换值为数值类型
data_long$value <- as.numeric(data_long$value)
# 检查是否有NA值
if(any(is.na(data_long$value))) {
warning(paste("NA values found in file:", file, "in years:", paste(data_long$year[is.na(data_long$value)], collapse = ", ")))
}
# 添加文件名列
data_long$file_name <- file
# 添加英文名列
data_long$english_name <- english_names[file_names == file]
# 返回处理后的数据
return(data_long)
})
# 读取并处理每个文件的数据
data_list <- lapply(file_names, function(file) {
# 检查文件扩展名，选择适当的读取方法
if (grepl("\\.xlsx$", file)) {
data <- read_excel(file)
} else {
data <- read_excel(file, sheet = 1)
}
# 打印当前文件名和列名
cat("Processing file:", file, "\n")
cat("Column names before cleaning:", colnames(data), "\n")
# 清理列名
colnames(data) <- make.names(colnames(data), unique = TRUE)
# 去除所有列名为空或全为NA的列
data <- data %>% select_if(~ !all(is.na(.)))
# 再次打印清理后的列名
cat("Column names after cleaning:", colnames(data), "\n")
# 确定需要转换的列
col_names <- colnames(data)[-1]  # 除去第一列
# 检查列名是否合理，如果只有一个数据列，跳过此文件
if (length(col_names) < 2) {
warning(paste("File", file, "has insufficient data columns after cleaning. Skipping this file."))
return(NULL)
}
# 将数据转换为长格式
data_long <- pivot_longer(data, cols = all_of(col_names), names_to = "year", values_to = "value")
# 提取年份
data_long$year <- gsub("年", "", data_long$year)
# 转换值为数值类型
data_long$value <- as.numeric(data_long$value)
# 检查是否有NA值
if(any(is.na(data_long$value))) {
warning(paste("NA values found in file:", file, "in years:", paste(data_long$year[is.na(data_long$value)], collapse = ", ")))
}
# 添加文件名列
data_long$file_name <- file
# 添加英文名列
data_long$english_name <- english_names[file_names == file]
# 返回处理后的数据
return(data_long)
})
# 从列表中移除 NULL 元素（如果有）
data_list <- data_list[!sapply(data_list, is.null)]
# 将所有数据框绑定在一起
final_data <- bind_rows(data_list)
# 删除不需要的列
final_data <- final_data %>%
select(-file_name)
# 查看前几行数据
head(final_data)
# 将数据从长格式转换为宽格式
final_data_wide <- pivot_wider(final_data, names_from = english_name, values_from = value)
# 查看转换后的数据
head(final_data_wide)
# 查看 province 列
final_data_wide$province
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data <- read.csv("出生率.xlsx")
View(data)
data <- read_xlsx("出生率.xlsx")
library(readxl)
library(tidyr)
library(ggplot2)
library(tidyr)
library(readxl)
library(tidyverse)
library(dplyr)
library(patchwork)
library(pinyin)
library(sf)
library(tmap)
library(tmaptools)
library(gridExtra)
library(sp)
library(spdep)
library(sf)
data <- read_xlsx("出生率.xlsx")
data <- read_xlsx("出生率.xlsx")
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth.Rate..‰.`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth.Rate..‰.`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth.Rate..‰.`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data <- read_xlsx("出生率.xlsx")
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth.Rate..‰.`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth.Rate..‰.`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth.Rate..‰.`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data <- read_xlsx("出生率.xlsx")
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth.Rate..‰.`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth.Rate..‰.`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth.Rate..‰.`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data <- read_xlsx("出生率.xlsx")
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth.Rate.‰.`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth.Rate.‰.`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth.Rate.‰.`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
y = `Birth.Rate.‰.`)
y = `Birth.Rate.‰.
data <- read_xlsx("出生率.xlsx")
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth.Rate.‰.`), stat = "identity", fill = "skyblue", alpha = 0.7) +
data <- read_xlsx("出生率.xlsx")
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth.Rate‰`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth.Rate.‰.`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth.Rate.‰.`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data <- read_xlsx("出生率.xlsx")
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth.Rate.‰.`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth.Rate.‰.`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth.Rate.‰.`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data <- read_xlsx("出生率.xlsx")
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth.Rate..‰.`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth.Rate..‰.`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth.Rate..‰.`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data <- read_xlsx("出生率.xlsx")
View(data)
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth.Rate..‰.`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth.Rate..‰.`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth.Rate..‰.`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth.Rate`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth.Rate`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth.Rate`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth_rate`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth_rate`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth_rate`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = factor(Year))) +
geom_bar(aes(y = `Birth rate`), stat = "identity", fill = "skyblue", alpha = 0.7) +
geom_line(aes(y = `Birth rate`), group = 1, color = "red", size = 1) +
geom_point(aes(y = `Birth rate`), color = "red", size = 2) +
labs(title = "Birth Rate Over the Years",
x = "Year",
y = "Birth Rate (‰)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_year_c <- c(2012, 2016, 2022)
par(mfrow = c(1, 3), mar = c(5, 4, 4, 2) + 0.1)
# Loop over each year and calculate Moran's I
for (i in 1:3) {
# Filter data for the specific year
data_year <- final_data_geo[final_data_geo$year == data_year_c[i], ]
# Extract coordinates
coords <- st_coordinates(st_as_sf(data_year))
coords_df <- data.frame(X = coords[, 1], Y = coords[, 2])
coords_mat <- as.matrix(coords_df)
# Calculate k-nearest neighbor spatial weights
nb <- knn2nb(knearneigh(coords_mat, k = 15))
listw <- nb2listw(nb, style = "B", zero.policy = TRUE)
# Calculate Moran's I
moran_I <- moran(data_year$fertility_rate, listw, n = 31, S0=Szero(listw))$I
# Perform Monte Carlo simulation
moran_mc <- moran.mc(data_year$fertility_rate, listw, nsim = 999)
moran_zvalue <- (moran_I - mean(moran_mc$res)) / sd(moran_mc$res)
hist(moran_mc$res, breaks=100, col="lightblue",
main=paste(data_year_c[i], "The empirical distribution of Moran's I"),
xlab="Moran's I", ylab="Frequency")
# Add the real Moran's I values
abline(v = moran_I, col = "red", lwd = 2)
# Add the mean of the permutation distribution
abline(v = mean(moran_mc$res), col = "blue", lty = 2)
# Add pseudo p-values
text(x = moran_I, y = 500, labels = paste("p =", round(moran_mc$p.value, 4)), col = "red")
legend("topright", legend=c("Actual Moran's I", "Mean of the permutation distribution"),
col=c("red", "blue"), lty=c(1, 2), lwd=c(2, 1), inset=c(-0.1, 0.05), bty="n", xpd=NA)
}
library(ggplot2)
library(tidyr)
library(readxl)
library(tidyverse)
library(dplyr)
library(patchwork)
library(pinyin)
library(sf)
library(tmap)
library(tmaptools)
library(gridExtra)
library(sp)
library(spdep)
library(sf)
